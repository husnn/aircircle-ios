// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: auth/auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum AircircleAuthPB_Method: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case email // = 1
  case phone // = 2
  case apple // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .email
    case 2: self = .phone
    case 3: self = .apple
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .email: return 1
    case .phone: return 2
    case .apple: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension AircircleAuthPB_Method: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [AircircleAuthPB_Method] = [
    .unspecified,
    .email,
    .phone,
    .apple,
  ]
}

#endif  // swift(>=4.2)

enum AircircleAuthPB_SignupStep: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case initial // = 1
  case success // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .initial
    case 2: self = .success
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .initial: return 1
    case .success: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension AircircleAuthPB_SignupStep: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [AircircleAuthPB_SignupStep] = [
    .unspecified,
    .initial,
    .success,
  ]
}

#endif  // swift(>=4.2)

enum AircircleAuthPB_LoginStep: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case initial // = 1
  case submitOtp // = 2
  case success // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .initial
    case 2: self = .submitOtp
    case 3: self = .success
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .initial: return 1
    case .submitOtp: return 2
    case .success: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension AircircleAuthPB_LoginStep: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [AircircleAuthPB_LoginStep] = [
    .unspecified,
    .initial,
    .submitOtp,
    .success,
  ]
}

#endif  // swift(>=4.2)

enum AircircleAuthPB_ResetPasswordStep: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case initial // = 1
  case submitOtp // = 2
  case resendOtp // = 3
  case newPassword // = 4
  case success // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .initial
    case 2: self = .submitOtp
    case 3: self = .resendOtp
    case 4: self = .newPassword
    case 5: self = .success
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .initial: return 1
    case .submitOtp: return 2
    case .resendOtp: return 3
    case .newPassword: return 4
    case .success: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension AircircleAuthPB_ResetPasswordStep: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [AircircleAuthPB_ResetPasswordStep] = [
    .unspecified,
    .initial,
    .submitOtp,
    .resendOtp,
    .newPassword,
    .success,
  ]
}

#endif  // swift(>=4.2)

struct AircircleAuthPB_Session {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String = String()

  var expiresAt: Int64 = 0

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AircircleAuthPB_SignupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var step: AircircleAuthPB_SignupStep = .unspecified

  var method: AircircleAuthPB_Method = .unspecified

  var password: String = String()

  var identifier: AircircleAuthPB_SignupRequest.OneOf_Identifier? = nil

  var email: String {
    get {
      if case .email(let v)? = identifier {return v}
      return String()
    }
    set {identifier = .email(newValue)}
  }

  var phone: String {
    get {
      if case .phone(let v)? = identifier {return v}
      return String()
    }
    set {identifier = .phone(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Identifier: Equatable {
    case email(String)
    case phone(String)

  #if !swift(>=4.1)
    static func ==(lhs: AircircleAuthPB_SignupRequest.OneOf_Identifier, rhs: AircircleAuthPB_SignupRequest.OneOf_Identifier) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.email, .email): return {
        guard case .email(let l) = lhs, case .email(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.phone, .phone): return {
        guard case .phone(let l) = lhs, case .phone(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct AircircleAuthPB_SignupResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var step: AircircleAuthPB_SignupStep = .unspecified

  var method: AircircleAuthPB_Method = .unspecified

  var session: AircircleAuthPB_Session {
    get {return _session ?? AircircleAuthPB_Session()}
    set {_session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return self._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {self._session = nil}

  var error: String = String()

  var redirect: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _session: AircircleAuthPB_Session? = nil
}

struct AircircleAuthPB_LoginRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var step: AircircleAuthPB_LoginStep = .unspecified

  var userType: Int32 = 0

  var method: AircircleAuthPB_Method = .unspecified

  var grantID: String = String()

  var otp: String = String()

  var password: String = String()

  var identifier: AircircleAuthPB_LoginRequest.OneOf_Identifier? = nil

  var email: String {
    get {
      if case .email(let v)? = identifier {return v}
      return String()
    }
    set {identifier = .email(newValue)}
  }

  var phone: String {
    get {
      if case .phone(let v)? = identifier {return v}
      return String()
    }
    set {identifier = .phone(newValue)}
  }

  var token: String {
    get {
      if case .token(let v)? = identifier {return v}
      return String()
    }
    set {identifier = .token(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Identifier: Equatable {
    case email(String)
    case phone(String)
    case token(String)

  #if !swift(>=4.1)
    static func ==(lhs: AircircleAuthPB_LoginRequest.OneOf_Identifier, rhs: AircircleAuthPB_LoginRequest.OneOf_Identifier) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.email, .email): return {
        guard case .email(let l) = lhs, case .email(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.phone, .phone): return {
        guard case .phone(let l) = lhs, case .phone(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.token, .token): return {
        guard case .token(let l) = lhs, case .token(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct AircircleAuthPB_LoginResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var step: AircircleAuthPB_LoginStep = .unspecified

  var grantID: String = String()

  var method: AircircleAuthPB_Method = .unspecified

  var session: AircircleAuthPB_Session {
    get {return _session ?? AircircleAuthPB_Session()}
    set {_session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  var hasSession: Bool {return self._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  mutating func clearSession() {self._session = nil}

  var error: String = String()

  var redirect: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _session: AircircleAuthPB_Session? = nil
}

struct AircircleAuthPB_ResetPasswordRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var step: AircircleAuthPB_ResetPasswordStep = .unspecified

  var userType: Int32 = 0

  var method: AircircleAuthPB_Method = .unspecified

  var password: String = String()

  var grantID: String = String()

  var nextOtpSend: Int64 = 0

  var otp: String = String()

  var identifier: AircircleAuthPB_ResetPasswordRequest.OneOf_Identifier? = nil

  var email: String {
    get {
      if case .email(let v)? = identifier {return v}
      return String()
    }
    set {identifier = .email(newValue)}
  }

  var phone: String {
    get {
      if case .phone(let v)? = identifier {return v}
      return String()
    }
    set {identifier = .phone(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Identifier: Equatable {
    case email(String)
    case phone(String)

  #if !swift(>=4.1)
    static func ==(lhs: AircircleAuthPB_ResetPasswordRequest.OneOf_Identifier, rhs: AircircleAuthPB_ResetPasswordRequest.OneOf_Identifier) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.email, .email): return {
        guard case .email(let l) = lhs, case .email(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.phone, .phone): return {
        guard case .phone(let l) = lhs, case .phone(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct AircircleAuthPB_ResetPasswordResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var step: AircircleAuthPB_ResetPasswordStep = .unspecified

  var grantID: String = String()

  var nextOtpSend: Int64 = 0

  var method: AircircleAuthPB_Method = .unspecified

  var error: String = String()

  var redirect: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension AircircleAuthPB_Method: @unchecked Sendable {}
extension AircircleAuthPB_SignupStep: @unchecked Sendable {}
extension AircircleAuthPB_LoginStep: @unchecked Sendable {}
extension AircircleAuthPB_ResetPasswordStep: @unchecked Sendable {}
extension AircircleAuthPB_Session: @unchecked Sendable {}
extension AircircleAuthPB_SignupRequest: @unchecked Sendable {}
extension AircircleAuthPB_SignupRequest.OneOf_Identifier: @unchecked Sendable {}
extension AircircleAuthPB_SignupResponse: @unchecked Sendable {}
extension AircircleAuthPB_LoginRequest: @unchecked Sendable {}
extension AircircleAuthPB_LoginRequest.OneOf_Identifier: @unchecked Sendable {}
extension AircircleAuthPB_LoginResponse: @unchecked Sendable {}
extension AircircleAuthPB_ResetPasswordRequest: @unchecked Sendable {}
extension AircircleAuthPB_ResetPasswordRequest.OneOf_Identifier: @unchecked Sendable {}
extension AircircleAuthPB_ResetPasswordResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "io.aircircle.auth"

extension AircircleAuthPB_Method: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "METHOD_UNSPECIFIED"),
    1: .same(proto: "METHOD_EMAIL"),
    2: .same(proto: "METHOD_PHONE"),
    3: .same(proto: "METHOD_APPLE"),
  ]
}

extension AircircleAuthPB_SignupStep: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIGNUP_STEP_UNSPECIFIED"),
    1: .same(proto: "SIGNUP_STEP_INITIAL"),
    2: .same(proto: "SIGNUP_STEP_SUCCESS"),
  ]
}

extension AircircleAuthPB_LoginStep: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOGIN_STEP_UNSPECIFIED"),
    1: .same(proto: "LOGIN_STEP_INITIAL"),
    2: .same(proto: "LOGIN_STEP_SUBMIT_OTP"),
    3: .same(proto: "LOGIN_STEP_SUCCESS"),
  ]
}

extension AircircleAuthPB_ResetPasswordStep: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESET_PASSWORD_STEP_UNSPECIFIED"),
    1: .same(proto: "RESET_PASSWORD_STEP_INITIAL"),
    2: .same(proto: "RESET_PASSWORD_STEP_SUBMIT_OTP"),
    3: .same(proto: "RESET_PASSWORD_STEP_RESEND_OTP"),
    4: .same(proto: "RESET_PASSWORD_STEP_NEW_PASSWORD"),
    5: .same(proto: "RESET_PASSWORD_STEP_SUCCESS"),
  ]
}

extension AircircleAuthPB_Session: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Session"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "expires_at"),
    3: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.expiresAt) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if self.expiresAt != 0 {
      try visitor.visitSingularInt64Field(value: self.expiresAt, fieldNumber: 2)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AircircleAuthPB_Session, rhs: AircircleAuthPB_Session) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.expiresAt != rhs.expiresAt {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AircircleAuthPB_SignupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignupRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
    2: .same(proto: "method"),
    3: .same(proto: "password"),
    4: .same(proto: "email"),
    5: .same(proto: "phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.step) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 4: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.identifier != nil {try decoder.handleConflictingOneOf()}
          self.identifier = .email(v)
        }
      }()
      case 5: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.identifier != nil {try decoder.handleConflictingOneOf()}
          self.identifier = .phone(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.step != .unspecified {
      try visitor.visitSingularEnumField(value: self.step, fieldNumber: 1)
    }
    if self.method != .unspecified {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    switch self.identifier {
    case .email?: try {
      guard case .email(let v)? = self.identifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .phone?: try {
      guard case .phone(let v)? = self.identifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AircircleAuthPB_SignupRequest, rhs: AircircleAuthPB_SignupRequest) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.method != rhs.method {return false}
    if lhs.password != rhs.password {return false}
    if lhs.identifier != rhs.identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AircircleAuthPB_SignupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignupResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
    2: .same(proto: "method"),
    3: .same(proto: "session"),
    4: .same(proto: "error"),
    5: .same(proto: "redirect"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.step) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._session) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.error) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.redirect) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.step != .unspecified {
      try visitor.visitSingularEnumField(value: self.step, fieldNumber: 1)
    }
    if self.method != .unspecified {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 2)
    }
    try { if let v = self._session {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 4)
    }
    if !self.redirect.isEmpty {
      try visitor.visitSingularStringField(value: self.redirect, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AircircleAuthPB_SignupResponse, rhs: AircircleAuthPB_SignupResponse) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.method != rhs.method {return false}
    if lhs._session != rhs._session {return false}
    if lhs.error != rhs.error {return false}
    if lhs.redirect != rhs.redirect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AircircleAuthPB_LoginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LoginRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
    2: .standard(proto: "user_type"),
    3: .same(proto: "method"),
    4: .standard(proto: "grant_id"),
    5: .same(proto: "otp"),
    6: .same(proto: "password"),
    7: .same(proto: "email"),
    8: .same(proto: "phone"),
    9: .same(proto: "token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.step) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.userType) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.grantID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.otp) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 7: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.identifier != nil {try decoder.handleConflictingOneOf()}
          self.identifier = .email(v)
        }
      }()
      case 8: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.identifier != nil {try decoder.handleConflictingOneOf()}
          self.identifier = .phone(v)
        }
      }()
      case 9: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.identifier != nil {try decoder.handleConflictingOneOf()}
          self.identifier = .token(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.step != .unspecified {
      try visitor.visitSingularEnumField(value: self.step, fieldNumber: 1)
    }
    if self.userType != 0 {
      try visitor.visitSingularInt32Field(value: self.userType, fieldNumber: 2)
    }
    if self.method != .unspecified {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 3)
    }
    if !self.grantID.isEmpty {
      try visitor.visitSingularStringField(value: self.grantID, fieldNumber: 4)
    }
    if !self.otp.isEmpty {
      try visitor.visitSingularStringField(value: self.otp, fieldNumber: 5)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 6)
    }
    switch self.identifier {
    case .email?: try {
      guard case .email(let v)? = self.identifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }()
    case .phone?: try {
      guard case .phone(let v)? = self.identifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }()
    case .token?: try {
      guard case .token(let v)? = self.identifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AircircleAuthPB_LoginRequest, rhs: AircircleAuthPB_LoginRequest) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.userType != rhs.userType {return false}
    if lhs.method != rhs.method {return false}
    if lhs.grantID != rhs.grantID {return false}
    if lhs.otp != rhs.otp {return false}
    if lhs.password != rhs.password {return false}
    if lhs.identifier != rhs.identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AircircleAuthPB_LoginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LoginResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
    2: .standard(proto: "grant_id"),
    3: .same(proto: "method"),
    4: .same(proto: "session"),
    5: .same(proto: "error"),
    6: .same(proto: "redirect"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.step) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.grantID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._session) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.error) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.redirect) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.step != .unspecified {
      try visitor.visitSingularEnumField(value: self.step, fieldNumber: 1)
    }
    if !self.grantID.isEmpty {
      try visitor.visitSingularStringField(value: self.grantID, fieldNumber: 2)
    }
    if self.method != .unspecified {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 3)
    }
    try { if let v = self._session {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 5)
    }
    if !self.redirect.isEmpty {
      try visitor.visitSingularStringField(value: self.redirect, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AircircleAuthPB_LoginResponse, rhs: AircircleAuthPB_LoginResponse) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.grantID != rhs.grantID {return false}
    if lhs.method != rhs.method {return false}
    if lhs._session != rhs._session {return false}
    if lhs.error != rhs.error {return false}
    if lhs.redirect != rhs.redirect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AircircleAuthPB_ResetPasswordRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResetPasswordRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
    2: .standard(proto: "user_type"),
    3: .same(proto: "method"),
    4: .same(proto: "password"),
    5: .standard(proto: "grant_id"),
    6: .standard(proto: "next_otp_send"),
    7: .same(proto: "otp"),
    8: .same(proto: "email"),
    9: .same(proto: "phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.step) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.userType) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.grantID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.nextOtpSend) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.otp) }()
      case 8: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.identifier != nil {try decoder.handleConflictingOneOf()}
          self.identifier = .email(v)
        }
      }()
      case 9: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.identifier != nil {try decoder.handleConflictingOneOf()}
          self.identifier = .phone(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.step != .unspecified {
      try visitor.visitSingularEnumField(value: self.step, fieldNumber: 1)
    }
    if self.userType != 0 {
      try visitor.visitSingularInt32Field(value: self.userType, fieldNumber: 2)
    }
    if self.method != .unspecified {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 3)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 4)
    }
    if !self.grantID.isEmpty {
      try visitor.visitSingularStringField(value: self.grantID, fieldNumber: 5)
    }
    if self.nextOtpSend != 0 {
      try visitor.visitSingularInt64Field(value: self.nextOtpSend, fieldNumber: 6)
    }
    if !self.otp.isEmpty {
      try visitor.visitSingularStringField(value: self.otp, fieldNumber: 7)
    }
    switch self.identifier {
    case .email?: try {
      guard case .email(let v)? = self.identifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }()
    case .phone?: try {
      guard case .phone(let v)? = self.identifier else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AircircleAuthPB_ResetPasswordRequest, rhs: AircircleAuthPB_ResetPasswordRequest) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.userType != rhs.userType {return false}
    if lhs.method != rhs.method {return false}
    if lhs.password != rhs.password {return false}
    if lhs.grantID != rhs.grantID {return false}
    if lhs.nextOtpSend != rhs.nextOtpSend {return false}
    if lhs.otp != rhs.otp {return false}
    if lhs.identifier != rhs.identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AircircleAuthPB_ResetPasswordResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResetPasswordResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
    2: .standard(proto: "grant_id"),
    3: .standard(proto: "next_otp_send"),
    4: .same(proto: "method"),
    5: .same(proto: "error"),
    6: .same(proto: "redirect"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.step) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.grantID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.nextOtpSend) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.error) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.redirect) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.step != .unspecified {
      try visitor.visitSingularEnumField(value: self.step, fieldNumber: 1)
    }
    if !self.grantID.isEmpty {
      try visitor.visitSingularStringField(value: self.grantID, fieldNumber: 2)
    }
    if self.nextOtpSend != 0 {
      try visitor.visitSingularInt64Field(value: self.nextOtpSend, fieldNumber: 3)
    }
    if self.method != .unspecified {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 4)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 5)
    }
    if !self.redirect.isEmpty {
      try visitor.visitSingularStringField(value: self.redirect, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AircircleAuthPB_ResetPasswordResponse, rhs: AircircleAuthPB_ResetPasswordResponse) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.grantID != rhs.grantID {return false}
    if lhs.nextOtpSend != rhs.nextOtpSend {return false}
    if lhs.method != rhs.method {return false}
    if lhs.error != rhs.error {return false}
    if lhs.redirect != rhs.redirect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
